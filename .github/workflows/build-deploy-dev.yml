name: Build and Deploy â€“ Dev

on:
  push:
    branches: [ "master" ]

# on:
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         default: 'prod'

permissions:
  contents: read

jobs:
  build-dev:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2.5'

    # - name: Validate composer.json and composer.lock
    #   run: composer validate --strict

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # - name: Run test suite
    #   run: composer run-script test
    
    - name: Install dependencies
      id: install-prod-deps
      run: |
        composer install --prefer-dist --no-progress
        cd resources/admin
        npm install
        npm run dev --if-present
        cd ../..
        npm install
        npm run dev --if-present

    - name: Upload a Build Artifact
      id: upload-dev-artifact
      uses: actions/upload-artifact@v4.3.1
      with:
        name: kc-dev-${{ github.sha }}
        path: |
          .
          !./node_modules
          !./resources/admin/node_modules

  deploy-dev:
    needs: [build-dev] # This only runs if the build is succesful
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Get Artifact ID
        id: get-dev-artifact-id
        run: |
          ARTIFACT_ID_RES=$(curl -sH "Authorization: Bearer ${{ secrets.GHUB_ACTIONS_API }}" \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts)
          
          ARTIFACT_ID=$(echo "$ARTIFACT_ID_RES" | jq -r '.artifacts[] | select(.name == "kc-dev-${{ github.sha }}") | .id' | head -n 1)
          echo "Dev Artifact ID: $ARTIFACT_ID"
          echo "DEV_ARTIFACT_ID=$ARTIFACT_ID" >> "$GITHUB_ENV"

          OLD_ARTIFACT_IDS=$(echo "$ARTIFACT_ID_RES" |  jq -r '.artifacts[] | select(.name | startswith("kc-dev")) | .id' | tail -n +3)
          {
            echo 'OLD_ARTIFACT_IDS<<EOF'
            echo $OLD_ARTIFACT_IDS
            echo EOF
          } >> "$GITHUB_ENV"
      
      - name: Get Artifact URL
        id: get-dev-artifact-url
        run: |
          ARTIFACT_URL=$(curl -IsH "Authorization: Bearer ${{ secrets.GHUB_ACTIONS_API }}" \
          https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ env.DEV_ARTIFACT_ID }}/zip | \
          grep -i '^location:' | \
          awk '{printf "%s", $2}' | \
          tr -d '\r\n')
          echo "Artifact URL: $ARTIFACT_URL"
          echo "DEV_ARTIFACT_URL=$ARTIFACT_URL" >> "$GITHUB_ENV"
    
      - name: Deploy to Scaleforce via Archive URL
        id: deploy-prod-artifact
        run: |
          scaleforceres=$(curl --location 'https://app.j.scaleforce.net/1.0/environment/deployment/rest/deployarchive' \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --data-urlencode 'fileName=kc-dev-${{ github.sha }}' \
          --data-urlencode 'envName=${{ vars.DEPLOY_ENV }}' \
          --data-urlencode 'session=${{ secrets.SCALEFORCE_DEPLOY_TOKEN }}' \
          --data-urlencode 'zdt=true' \
          --data-urlencode 'nodeGroup=cp' \
          --data-urlencode 'fileUrl=${{ env.DEV_ARTIFACT_URL }}' \
          --data-urlencode 'hooks={"preDeploy":"cd /var/www/webroot && ln /var/www/webroot/ROOT OLDROOT", "postDeploy":"rsync -av --ignore-existing --exclude=\"node_modules/\" --exclude=\"vendor/\" --exclude=\".git/\" --include=\".*\" /var/www/webroot/OLDROOT/ /var/www/webroot/ROOT/ \&\& cd /var/www/webroot/ROOT \&\& echo $(git rev-parse --short HEAD \&\& git log -1 --format=\"%at\" | xargs -I{} date -d @{} +%Y/%m/%d_%H:%M:%S) > /var/www/webroot/ROOT/storage/app/version-commit.txt \&\& php artisan migrate \&\& php artisan migrate --path=/database/migrations/cms \&\& php artisan migrate --path=/database/migrations/cms-plugins \&\& php artisan view:clear \&\& php artisan cache:clear \&\& php artisan config:clear \&\& php artisan config:cache \&\& rm /var/www/webroot/OLDROOT \&\& echo \"Post Deploy Hook Ended\""}')
          echo $scaleforceres
          scaleforceres_result=$(echo "$scaleforceres" | jq '.result')
          echo "SCALEFORCE_RES=$scaleforceres_result" >> "$GITHUB_ENV"

      - name: Fail if JSON response is not 0
        id: verify-dev-artifact-deployment
        if: ${{ env.SCALEFORCE_RES != '0' }}
        run: echo "JSON response is not 0, failing the job." && exit 1

      - name: Delete Old Dev Artifacts
        id: delete-old-dev-artifacts
        run: |
          # Delete Old Artifacts
          for artifact_id in ${{ env.OLD_ARTIFACT_IDS }}; do
            curl -X DELETE -sH "Authorization: Bearer ${{ secrets.GHUB_ACTIONS_API }}" "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/$artifact_id"
            echo "Deleted artifact with ID: $artifact_id"
          done
